{
  "swagger": "2.0",
  "info": {
    "title": "Kruise",
    "version": "v0.1.0"
  },
  "paths": {},
  "definitions": {
    "kruise.apps.v1alpha1.AdvancedStatefulSetTemplateSpec": {
      "description": "AdvancdStatefulSetTemplateSpec defines the subset template of AdvancedStatefulSet.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/kruise.apps.v1alpha1.StatefulSetSpec"
        }
      }
    },
    "kruise.apps.v1alpha1.BroadcastJob": {
      "description": "BroadcastJob is the Schema for the broadcastjobs API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/kruise.apps.v1alpha1.BroadcastJobSpec"
        },
        "status": {
          "$ref": "#/definitions/kruise.apps.v1alpha1.BroadcastJobStatus"
        }
      }
    },
    "kruise.apps.v1alpha1.BroadcastJobList": {
      "description": "BroadcastJobList contains a list of BroadcastJob",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/kruise.apps.v1alpha1.BroadcastJob"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    },
    "kruise.apps.v1alpha1.BroadcastJobSpec": {
      "description": "BroadcastJobSpec defines the desired state of BroadcastJob",
      "type": "object",
      "required": [
        "template"
      ],
      "properties": {
        "completionPolicy": {
          "description": "CompletionPolicy indicates the completion policy of the job. Default is Always CompletionPolicyType",
          "$ref": "#/definitions/kruise.apps.v1alpha1.CompletionPolicy"
        },
        "failurePolicy": {
          "description": "FailurePolicy indicates the behavior of the job, when failed pod is found.",
          "$ref": "#/definitions/kruise.apps.v1alpha1.FailurePolicy"
        },
        "parallelism": {
          "description": "Parallelism specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when the work left to do is less than max parallelism. Not setting this value means no limit.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        },
        "paused": {
          "description": "Paused will pause the job.",
          "type": "boolean"
        },
        "template": {
          "description": "Template describes the pod that will be created when executing a job.",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
        }
      }
    },
    "kruise.apps.v1alpha1.BroadcastJobStatus": {
      "description": "BroadcastJobStatus defines the observed state of BroadcastJob",
      "type": "object",
      "properties": {
        "active": {
          "description": "The number of actively running pods.",
          "type": "integer",
          "format": "int32"
        },
        "completionTime": {
          "description": "Represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "conditions": {
          "description": "The latest available observations of an object's current state.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/kruise.apps.v1alpha1.JobCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "desired": {
          "description": "The desired number of pods, this is typically equal to the number of nodes satisfied to run pods.",
          "type": "integer",
          "format": "int32"
        },
        "failed": {
          "description": "The number of pods which reached phase Failed.",
          "type": "integer",
          "format": "int32"
        },
        "phase": {
          "description": "The phase of the job.",
          "type": "string"
        },
        "startTime": {
          "description": "Represents time when the job was acknowledged by the job controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "succeeded": {
          "description": "The number of pods which reached phase Succeeded.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "kruise.apps.v1alpha1.CloneSet": {
      "description": "CloneSet is the Schema for the clonesets API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/kruise.apps.v1alpha1.CloneSetSpec"
        },
        "status": {
          "$ref": "#/definitions/kruise.apps.v1alpha1.CloneSetStatus"
        }
      }
    },
    "kruise.apps.v1alpha1.CloneSetCondition": {
      "description": "CloneSetCondition describes the state of a CloneSet at a certain point.",
      "type": "object",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastTransitionTime": {
          "description": "Last time the condition transitioned from one status to another.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "A human readable message indicating details about the transition.",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type of CloneSet condition.",
          "type": "string"
        }
      }
    },
    "kruise.apps.v1alpha1.CloneSetInPlaceUpdateStrategy": {
      "description": "CloneSetInPlaceUpdateStrategy defines the strategies for in-place update.",
      "type": "object"
    },
    "kruise.apps.v1alpha1.CloneSetList": {
      "description": "CloneSetList contains a list of CloneSet",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/kruise.apps.v1alpha1.CloneSet"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    },
    "kruise.apps.v1alpha1.CloneSetScaleStrategy": {
      "description": "CloneSetScaleStrategy defines strategies for pods scale.",
      "type": "object",
      "properties": {
        "podsToDelete": {
          "description": "PodsToDelete is the names of Pod should be deleted. Note that this list will be truncated for non-existing pod names.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "kruise.apps.v1alpha1.CloneSetSpec": {
      "description": "CloneSetSpec defines the desired state of CloneSet",
      "type": "object",
      "required": [
        "replicas",
        "selector",
        "template"
      ],
      "properties": {
        "replicas": {
          "description": "Replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template. If unspecified, defaults to 1.",
          "type": "integer",
          "format": "int32"
        },
        "revisionHistoryLimit": {
          "description": "RevisionHistoryLimit is the maximum number of revisions that will be maintained in the CloneSet's revision history. The revision history consists of all revisions not represented by a currently applied CloneSetSpec version. The default value is 10.",
          "type": "integer",
          "format": "int32"
        },
        "scaleStrategy": {
          "description": "ScaleStrategy indicates the ScaleStrategy that will be employed to create and delete Pods in the CloneSet.",
          "$ref": "#/definitions/kruise.apps.v1alpha1.CloneSetScaleStrategy"
        },
        "selector": {
          "description": "Selector is a label query over pods that should match the replica count. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "template": {
          "description": "Template describes the pods that will be created.",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
        },
        "updateStrategy": {
          "description": "UpdateStrategy indicates the UpdateStrategy that will be employed to update Pods in the CloneSet when a revision is made to Template.",
          "$ref": "#/definitions/kruise.apps.v1alpha1.CloneSetUpdateStrategy"
        },
        "volumeClaimTemplates": {
          "description": "VolumeClaimTemplates is a list of claims that pods are allowed to reference. Note that PVC will be deleted when its pod has been deleted.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim"
          }
        }
      }
    },
    "kruise.apps.v1alpha1.CloneSetStatus": {
      "description": "CloneSetStatus defines the observed state of CloneSet",
      "type": "object",
      "required": [
        "replicas",
        "readyReplicas",
        "updatedReplicas",
        "updatedReadyReplicas"
      ],
      "properties": {
        "collisionCount": {
          "description": "CollisionCount is the count of hash collisions for the CloneSet. The CloneSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.",
          "type": "integer",
          "format": "int32"
        },
        "conditions": {
          "description": "Conditions represents the latest available observations of a CloneSet's current state.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/kruise.apps.v1alpha1.CloneSetCondition"
          }
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the most recent generation observed for this CloneSet. It corresponds to the CloneSet's generation, which is updated on mutation by the API Server.",
          "type": "integer",
          "format": "int64"
        },
        "readyReplicas": {
          "description": "ReadyReplicas is the number of Pods created by the CloneSet controller that have a Ready Condition.",
          "type": "integer",
          "format": "int32"
        },
        "replicas": {
          "description": "Replicas is the number of Pods created by the CloneSet controller.",
          "type": "integer",
          "format": "int32"
        },
        "updateRevision": {
          "description": "UpdateRevision, if not empty, indicates the latest revision of the CloneSet.",
          "type": "string"
        },
        "updatedReadyReplicas": {
          "description": "UpdatedReadyReplicas is the number of Pods created by the CloneSet controller from the CloneSet version indicated by updateRevision and have a Ready Condition.",
          "type": "integer",
          "format": "int32"
        },
        "updatedReplicas": {
          "description": "UpdatedReplicas is the number of Pods created by the CloneSet controller from the CloneSet version indicated by updateRevision.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "kruise.apps.v1alpha1.CloneSetUpdateScatterTerm": {
      "type": "object",
      "required": [
        "key",
        "value"
      ],
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "kruise.apps.v1alpha1.CloneSetUpdateStrategy": {
      "description": "CloneSetUpdateStrategy defines strategies for pods update.",
      "type": "object",
      "properties": {
        "inPlaceUpdateStrategy": {
          "description": "InPlaceUpdateStrategy contains strategies for in-place update.",
          "$ref": "#/definitions/kruise.apps.v1alpha1.CloneSetInPlaceUpdateStrategy"
        },
        "maxUnavailable": {
          "description": "The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. Defaults to 20%.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        },
        "partition": {
          "description": "Partition is the desired number of pods in old revisions. It means when partition is set during pods updating, (replicas - partition) number of pods will be updated. Default value is 0.",
          "type": "integer",
          "format": "int32"
        },
        "paused": {
          "description": "Paused indicates that the CloneSet is paused. Default value is false",
          "type": "boolean"
        },
        "priorityStrategy": {
          "description": "Priorities are the rules for calculating the priority of updating pods. Each pod to be updated, will pass through these terms and get a sum of weights.",
          "$ref": "#/definitions/kruise.apps.v1alpha1.UpdatePriorityStrategy"
        },
        "scatterStrategy": {
          "description": "ScatterStrategy defines the scatter rules to make pods been scattered when update. This will avoid pods with the same key-value to be updated in one batch. - Note that pods will be scattered after priority sort. So, although priority strategy and scatter strategy can be applied together, we suggest to use either one of them. - If scatterStrategy is used, we suggest to just use one term. Otherwise, the update order can be hard to understand.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/kruise.apps.v1alpha1.CloneSetUpdateScatterTerm"
          }
        },
        "type": {
          "description": "Type indicates the type of the CloneSetUpdateStrategy. Default is ReCreate.",
          "type": "string"
        }
      }
    },
    "kruise.apps.v1alpha1.CompletionPolicy": {
      "description": "CompletionPolicy indicates the completion policy for the job",
      "type": "object",
      "properties": {
        "activeDeadlineSeconds": {
          "description": "ActiveDeadlineSeconds specifies the duration in seconds relative to the startTime that the job may be active before the system tries to terminate it; value must be positive integer. Only works for Always type.",
          "type": "integer",
          "format": "int64"
        },
        "ttlSecondsAfterFinished": {
          "description": "ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes. This field is alpha-level and is only honored by servers that enable the TTLAfterFinished feature. Only works for Always type",
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "description": "Type indicates the type of the CompletionPolicy Default is Always",
          "type": "string"
        }
      }
    },
    "kruise.apps.v1alpha1.FailurePolicy": {
      "description": "FailurePolicy indicates the behavior of the job, when failed pod is found.",
      "type": "object",
      "properties": {
        "restartLimit": {
          "description": "RestartLimit specifies the number of retries before marking the pod failed.",
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "description": "Type indicates the type of FailurePolicyType.",
          "type": "string"
        }
      }
    },
    "kruise.apps.v1alpha1.InPlaceUpdateContainerStatus": {
      "description": "InPlaceUpdateContainerStatus records the statuses of the container that are mainly used to determine whether the InPlaceUpdate is completed.",
      "type": "object",
      "properties": {
        "imageID": {
          "type": "string"
        }
      }
    },
    "kruise.apps.v1alpha1.InPlaceUpdateState": {
      "description": "InPlaceUpdateState records latest inplace-update state, including old statuses of containers.",
      "type": "object",
      "required": [
        "revision",
        "updateTimestamp",
        "lastContainerStatuses"
      ],
      "properties": {
        "lastContainerStatuses": {
          "description": "LastContainerStatuses records the before-in-place-update container statuses. It is a map from ContainerName to InPlaceUpdateContainerStatus",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/kruise.apps.v1alpha1.InPlaceUpdateContainerStatus"
          }
        },
        "revision": {
          "description": "Revision is the updated revision hash.",
          "type": "string"
        },
        "updateTimestamp": {
          "description": "UpdateTimestamp is the time when the in-place update happens.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }
      }
    },
    "kruise.apps.v1alpha1.JobCondition": {
      "description": "JobCondition describes current state of a job.",
      "type": "object",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastProbeTime": {
          "description": "Last time the condition was checked.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "lastTransitionTime": {
          "description": "Last time the condition transit from one status to another.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "Human readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "(brief) reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type of job condition, Complete or Failed.",
          "type": "string"
        }
      }
    },
    "kruise.apps.v1alpha1.ManualUpdate": {
      "description": "ManualUpdate is a update strategy which allows users to control the update progress by providing the partition of each subset.",
      "type": "object",
      "properties": {
        "partitions": {
          "description": "Indicates number of subset partition.",
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          }
        }
      }
    },
    "kruise.apps.v1alpha1.RollingUpdateSidecarSet": {
      "description": "RollingUpdateSidecarSet is used to communicate parameter",
      "type": "object",
      "properties": {
        "maxUnavailable": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        }
      }
    },
    "kruise.apps.v1alpha1.RollingUpdateStatefulSetStrategy": {
      "description": "RollingUpdateStatefulSetStrategy is used to communicate parameter for RollingUpdateStatefulSetStrategyType.",
      "type": "object",
      "properties": {
        "maxUnavailable": {
          "description": "The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. Also, maxUnavailable can just be allowed to work with Parallel podManagementPolicy. Defaults to 1.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        },
        "partition": {
          "description": "Partition indicates the ordinal at which the StatefulSet should be partitioned by default. But if unorderedUpdate has been set:\n  - Partition indicates the number of pods with non-updated revisions when rolling update.\n  - It means controller will update $(replicas - partition) number of pod.\nDefault value is 0.",
          "type": "integer",
          "format": "int32"
        },
        "paused": {
          "description": "Paused indicates that the StatefulSet is paused. Default value is false",
          "type": "boolean"
        },
        "podUpdatePolicy": {
          "description": "PodUpdatePolicy indicates how pods should be updated Default value is \"ReCreate\"",
          "type": "string"
        },
        "unorderedUpdate": {
          "description": "UnorderedUpdate contains strategies for non-ordered update. If it is not nil, pods will be updated with non-ordered sequence. Noted that UnorderedUpdate can only be allowed to work with Parallel podManagementPolicy",
          "$ref": "#/definitions/kruise.apps.v1alpha1.UnorderedUpdateStrategy"
        }
      }
    },
    "kruise.apps.v1alpha1.SidecarContainer": {
      "description": "SidecarContainer defines the container of Sidecar",
      "type": "object",
      "required": [
        "Container"
      ],
      "properties": {
        "Container": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Container"
        }
      }
    },
    "kruise.apps.v1alpha1.SidecarSet": {
      "description": "SidecarSet is the Schema for the sidecarsets API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/kruise.apps.v1alpha1.SidecarSetSpec"
        },
        "status": {
          "$ref": "#/definitions/kruise.apps.v1alpha1.SidecarSetStatus"
        }
      }
    },
    "kruise.apps.v1alpha1.SidecarSetList": {
      "description": "SidecarSetList contains a list of SidecarSet",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/kruise.apps.v1alpha1.SidecarSet"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    },
    "kruise.apps.v1alpha1.SidecarSetSpec": {
      "description": "SidecarSetSpec defines the desired state of SidecarSet",
      "type": "object",
      "properties": {
        "containers": {
          "description": "Containers is the list of sidecar containers to be injected into the selected pod",
          "type": "array",
          "items": {
            "$ref": "#/definitions/kruise.apps.v1alpha1.SidecarContainer"
          }
        },
        "paused": {
          "description": "Paused indicates that the sidecarset is paused and will not be processed by the sidecarset controller.",
          "type": "boolean"
        },
        "selector": {
          "description": "selector is a label query over pods that should be injected",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "strategy": {
          "description": "The sidecarset strategy to use to replace existing pods with new ones.",
          "$ref": "#/definitions/kruise.apps.v1alpha1.SidecarSetUpdateStrategy"
        },
        "volumes": {
          "description": "List of volumes that can be mounted by sidecar containers",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Volume"
          }
        }
      }
    },
    "kruise.apps.v1alpha1.SidecarSetStatus": {
      "description": "SidecarSetStatus defines the observed state of SidecarSet",
      "type": "object",
      "required": [
        "matchedPods",
        "updatedPods",
        "readyPods"
      ],
      "properties": {
        "matchedPods": {
          "description": "matchedPods is the number of Pods whose labels are matched with this SidecarSet's selector and are created after sidecarset creates",
          "type": "integer",
          "format": "int32"
        },
        "observedGeneration": {
          "description": "observedGeneration is the most recent generation observed for this SidecarSet. It corresponds to the SidecarSet's generation, which is updated on mutation by the API Server.",
          "type": "integer",
          "format": "int64"
        },
        "readyPods": {
          "description": "readyPods is the number of matched Pods that have a ready condition",
          "type": "integer",
          "format": "int32"
        },
        "updatedPods": {
          "description": "updatedPods is the number of matched Pods that are injected with the latest SidecarSet's containers",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "kruise.apps.v1alpha1.SidecarSetUpdateStrategy": {
      "description": "SidecarSetUpdateStrategy indicates the strategy that the SidecarSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy.",
      "type": "object",
      "properties": {
        "rollingUpdate": {
          "$ref": "#/definitions/kruise.apps.v1alpha1.RollingUpdateSidecarSet"
        }
      }
    },
    "kruise.apps.v1alpha1.StatefulSet": {
      "description": "StatefulSet is the Schema for the statefulsets API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/kruise.apps.v1alpha1.StatefulSetSpec"
        },
        "status": {
          "$ref": "#/definitions/kruise.apps.v1alpha1.StatefulSetStatus"
        }
      }
    },
    "kruise.apps.v1alpha1.StatefulSetList": {
      "description": "StatefulSetList contains a list of StatefulSet",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/kruise.apps.v1alpha1.StatefulSet"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    },
    "kruise.apps.v1alpha1.StatefulSetSpec": {
      "description": "StatefulSetSpec defines the desired state of StatefulSet",
      "type": "object",
      "required": [
        "selector",
        "template"
      ],
      "properties": {
        "podManagementPolicy": {
          "description": "podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, the pods are removed in the opposite order. The alternative policy is `Parallel` which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once.",
          "type": "string"
        },
        "replicas": {
          "description": "replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1.",
          "type": "integer",
          "format": "int32"
        },
        "revisionHistoryLimit": {
          "description": "revisionHistoryLimit is the maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied StatefulSetSpec version. The default value is 10.",
          "type": "integer",
          "format": "int32"
        },
        "selector": {
          "description": "selector is a label query over pods that should match the replica count. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "serviceName": {
          "description": "serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where \"pod-specific-string\" is managed by the StatefulSet controller.",
          "type": "string"
        },
        "template": {
          "description": "template is the object that describes the pod that will be created if insufficient replicas are detected. Each pod stamped out by the StatefulSet will fulfill this Template, but have a unique identity from the rest of the StatefulSet.",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
        },
        "updateStrategy": {
          "description": "updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to update Pods in the StatefulSet when a revision is made to Template.",
          "$ref": "#/definitions/kruise.apps.v1alpha1.StatefulSetUpdateStrategy"
        },
        "volumeClaimTemplates": {
          "description": "volumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim"
          }
        }
      }
    },
    "kruise.apps.v1alpha1.StatefulSetStatus": {
      "description": "StatefulSetStatus defines the observed state of StatefulSet",
      "type": "object",
      "required": [
        "replicas",
        "readyReplicas",
        "currentReplicas",
        "updatedReplicas"
      ],
      "properties": {
        "collisionCount": {
          "description": "collisionCount is the count of hash collisions for the StatefulSet. The StatefulSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.",
          "type": "integer",
          "format": "int32"
        },
        "conditions": {
          "description": "Represents the latest available observations of a statefulset's current state.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "currentReplicas": {
          "description": "currentReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by currentRevision.",
          "type": "integer",
          "format": "int32"
        },
        "currentRevision": {
          "description": "currentRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [0,currentReplicas).",
          "type": "string"
        },
        "observedGeneration": {
          "description": "observedGeneration is the most recent generation observed for this StatefulSet. It corresponds to the StatefulSet's generation, which is updated on mutation by the API Server.",
          "type": "integer",
          "format": "int64"
        },
        "readyReplicas": {
          "description": "readyReplicas is the number of Pods created by the StatefulSet controller that have a Ready Condition.",
          "type": "integer",
          "format": "int32"
        },
        "replicas": {
          "description": "replicas is the number of Pods created by the StatefulSet controller.",
          "type": "integer",
          "format": "int32"
        },
        "updateRevision": {
          "description": "updateRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [replicas-updatedReplicas,replicas)",
          "type": "string"
        },
        "updatedReplicas": {
          "description": "updatedReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by updateRevision.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "kruise.apps.v1alpha1.StatefulSetTemplateSpec": {
      "description": "StatefulSetTemplateSpec defines the subset template of StatefulSet.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetSpec"
        }
      }
    },
    "kruise.apps.v1alpha1.StatefulSetUpdateStrategy": {
      "description": "StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy.",
      "type": "object",
      "properties": {
        "rollingUpdate": {
          "description": "RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.",
          "$ref": "#/definitions/kruise.apps.v1alpha1.RollingUpdateStatefulSetStrategy"
        },
        "type": {
          "description": "Type indicates the type of the StatefulSetUpdateStrategy. Default is RollingUpdate.",
          "type": "string"
        }
      }
    },
    "kruise.apps.v1alpha1.Subset": {
      "description": "Subset defines the detail of a subset.",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "Indicates subset name as a DNS_LABEL, which will be used to generate subset workload name prefix in the format '\u003cdeployment-name\u003e-\u003csubset-name\u003e-'. Name should be unique between all of the subsets under one UnitedDeployment.",
          "type": "string"
        },
        "nodeSelectorTerm": {
          "description": "Indicates the node selector to form the subset. Depending on the node selector, pods provisioned could be distributed across multiple groups of nodes. A subset's nodeSelectorTerm is not allowed to be updated.",
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelectorTerm"
        },
        "replicas": {
          "description": "Indicates the number of the pod to be created under this subset. Replicas could also be percentage like '10%', which means 10% of UnitedDeployment replicas of pods will be distributed under this subset. If nil, the number of replicas in this subset is determined by controller. Controller will try to keep all the subsets with nil replicas have average pods.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        },
        "tolerations": {
          "description": "Indicates the tolerations the pods under this subset have. A subset's tolerations is not allowed to be updated.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
          }
        }
      }
    },
    "kruise.apps.v1alpha1.SubsetTemplate": {
      "description": "SubsetTemplate defines the subset template under the UnitedDeployment. UnitedDeployment will provision every subset based on one workload templates in SubsetTemplate.",
      "type": "object",
      "properties": {
        "advancedStatefulSetTemplate": {
          "description": "AdvancedStatefulSet template",
          "$ref": "#/definitions/kruise.apps.v1alpha1.AdvancedStatefulSetTemplateSpec"
        },
        "statefulSetTemplate": {
          "description": "StatefulSet template",
          "$ref": "#/definitions/kruise.apps.v1alpha1.StatefulSetTemplateSpec"
        }
      }
    },
    "kruise.apps.v1alpha1.Topology": {
      "description": "Topology defines the spread detail of each subset under UnitedDeployment. A UnitedDeployment manages multiple homogeneous workloads which are called subset. Each of subsets under the UnitedDeployment is described in Topology.",
      "type": "object",
      "properties": {
        "subsets": {
          "description": "Contains the details of each subset. Each element in this array represents one subset which will be provisioned and managed by UnitedDeployment.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/kruise.apps.v1alpha1.Subset"
          }
        }
      }
    },
    "kruise.apps.v1alpha1.UnitedDeployment": {
      "description": "UnitedDeployment is the Schema for the uniteddeployments API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/kruise.apps.v1alpha1.UnitedDeploymentSpec"
        },
        "status": {
          "$ref": "#/definitions/kruise.apps.v1alpha1.UnitedDeploymentStatus"
        }
      }
    },
    "kruise.apps.v1alpha1.UnitedDeploymentCondition": {
      "description": "UnitedDeploymentCondition describes current state of a UnitedDeployment.",
      "type": "object",
      "properties": {
        "lastTransitionTime": {
          "description": "Last time the condition transitioned from one status to another.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "A human readable message indicating details about the transition.",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type of in place set condition.",
          "type": "string"
        }
      }
    },
    "kruise.apps.v1alpha1.UnitedDeploymentList": {
      "description": "UnitedDeploymentList contains a list of UnitedDeployment.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/kruise.apps.v1alpha1.UnitedDeployment"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    },
    "kruise.apps.v1alpha1.UnitedDeploymentSpec": {
      "description": "UnitedDeploymentSpec defines the desired state of UnitedDeployment.",
      "type": "object",
      "required": [
        "selector"
      ],
      "properties": {
        "replicas": {
          "description": "Replicas is the total desired replicas of all the subsets. If unspecified, defaults to 1.",
          "type": "integer",
          "format": "int32"
        },
        "revisionHistoryLimit": {
          "description": "Indicates the number of histories to be conserved. If unspecified, defaults to 10.",
          "type": "integer",
          "format": "int32"
        },
        "selector": {
          "description": "Selector is a label query over pods that should match the replica count. It must match the pod template's labels.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "template": {
          "description": "Template describes the subset that will be created.",
          "$ref": "#/definitions/kruise.apps.v1alpha1.SubsetTemplate"
        },
        "topology": {
          "description": "Topology describes the pods distribution detail between each of subsets.",
          "$ref": "#/definitions/kruise.apps.v1alpha1.Topology"
        },
        "updateStrategy": {
          "description": "UpdateStrategy indicates the strategy the UnitedDeployment use to preform the update, when template is changed.",
          "$ref": "#/definitions/kruise.apps.v1alpha1.UnitedDeploymentUpdateStrategy"
        }
      }
    },
    "kruise.apps.v1alpha1.UnitedDeploymentStatus": {
      "description": "UnitedDeploymentStatus defines the observed state of UnitedDeployment.",
      "type": "object",
      "required": [
        "replicas",
        "updatedReplicas",
        "currentRevision"
      ],
      "properties": {
        "collisionCount": {
          "description": "Count of hash collisions for the UnitedDeployment. The UnitedDeployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.",
          "type": "integer",
          "format": "int32"
        },
        "conditions": {
          "description": "Represents the latest available observations of a UnitedDeployment's current state.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/kruise.apps.v1alpha1.UnitedDeploymentCondition"
          }
        },
        "currentRevision": {
          "description": "CurrentRevision, if not empty, indicates the current version of the UnitedDeployment.",
          "type": "string"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the most recent generation observed for this UnitedDeployment. It corresponds to the UnitedDeployment's generation, which is updated on mutation by the API Server.",
          "type": "integer",
          "format": "int64"
        },
        "readyReplicas": {
          "description": "The number of ready replicas.",
          "type": "integer",
          "format": "int32"
        },
        "replicas": {
          "description": "Replicas is the most recently observed number of replicas.",
          "type": "integer",
          "format": "int32"
        },
        "subsetReplicas": {
          "description": "Records the topology detail information of the replicas of each subset.",
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          }
        },
        "updateStatus": {
          "description": "Records the information of update progress.",
          "$ref": "#/definitions/kruise.apps.v1alpha1.UpdateStatus"
        },
        "updatedReadyReplicas": {
          "description": "The number of ready current revision replicas for this UnitedDeployment.",
          "type": "integer",
          "format": "int32"
        },
        "updatedReplicas": {
          "description": "The number of pods in current version.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "kruise.apps.v1alpha1.UnitedDeploymentUpdateStrategy": {
      "description": "UnitedDeploymentUpdateStrategy defines the update performance when template of UnitedDeployment is changed.",
      "type": "object",
      "properties": {
        "manualUpdate": {
          "description": "Includes all of the parameters a Manual update strategy needs.",
          "$ref": "#/definitions/kruise.apps.v1alpha1.ManualUpdate"
        },
        "type": {
          "description": "Type of UnitedDeployment update strategy. Default is Manual.",
          "type": "string"
        }
      }
    },
    "kruise.apps.v1alpha1.UnorderedUpdateStrategy": {
      "description": "UnorderedUpdateStrategy defines strategies for non-ordered update.",
      "type": "object",
      "properties": {
        "priorityStrategy": {
          "description": "Priorities are the rules for calculating the priority of updating pods. Each pod to be updated, will pass through these terms and get a sum of weights.",
          "$ref": "#/definitions/kruise.apps.v1alpha1.UpdatePriorityStrategy"
        }
      }
    },
    "kruise.apps.v1alpha1.UpdatePriorityOrderTerm": {
      "description": "UpdatePriorityOrder defines order priority.",
      "type": "object",
      "required": [
        "orderedKey"
      ],
      "properties": {
        "orderedKey": {
          "description": "Calculate priority by value of this key. Values of this key, will be sorted by GetInt(val). GetInt method will find the last int in value, such as getting 5 in value '5', getting 10 in value 'sts-10'.",
          "type": "string"
        }
      }
    },
    "kruise.apps.v1alpha1.UpdatePriorityStrategy": {
      "description": "UpdatePriorityStrategy is the strategy to define priority for pods update. Only one of orderPriority and weightPriority can be set.",
      "type": "object",
      "properties": {
        "orderPriority": {
          "description": "Order priority terms, pods will be sorted by the value of orderedKey. For example: ``` orderPriority: - orderedKey: key1 - orderedKey: key2 ``` First, all pods which have key1 in labels will be sorted by the value of key1. Then, the left pods which have no key1 but have key2 in labels will be sorted by the value of key2 and put behind those pods have key1.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/kruise.apps.v1alpha1.UpdatePriorityOrderTerm"
          }
        },
        "weightPriority": {
          "description": "Weight priority terms, pods will be sorted by the sum of all terms weight.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/kruise.apps.v1alpha1.UpdatePriorityWeightTerm"
          }
        }
      }
    },
    "kruise.apps.v1alpha1.UpdatePriorityWeightTerm": {
      "description": "UpdatePriorityWeightTerm defines weight priority.",
      "type": "object",
      "required": [
        "weight",
        "matchSelector"
      ],
      "properties": {
        "matchSelector": {
          "description": "MatchSelector is used to select by pod's labels.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "weight": {
          "description": "Weight associated with matching the corresponding matchExpressions, in the range 1-100.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "kruise.apps.v1alpha1.UpdateStatus": {
      "description": "UpdateStatus defines the observed update state of UnitedDeployment.",
      "type": "object",
      "properties": {
        "currentPartitions": {
          "description": "Records the current partition.",
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          }
        },
        "updatedRevision": {
          "description": "Records the latest revision.",
          "type": "string"
        }
      }
    }
  }
}
